C51 COMPILER V9.56.0.0   MAIN                                                              11/12/2020 12:57:59 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Source\main.c ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Include
                    -;.\Source) DEBUG OBJECTEXTEND PRINT(.\LST\main.lst) TABS(2) OBJECT(.\Output\main.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2017 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Nuvoton Technoledge Corp. 
   9          //  Website: http://www.nuvoton.com
  10          //  E-Mail : MicroC-8bit@nuvoton.com
  11          //  Date   : Apr/21/2017
  12          //********************************************************************************************************
             -***
  13          #include "includes.h"
  14          
  15          
  16          u8 SOFTWARE_VERSION[3] = {1,0,1};
  17          
  18          void ModeLED(void);
  19          extern UINT8 read_APROM_BYTE(UINT16 code *u16_addr);
  20          extern void write_DATAFLASH_BYTE(UINT16 u16_addr,UINT8 u8_data);
  21          
  22          /*******************************************************************************
  23           * FUNCTION_PURPOSE: Main function 
  24           ******************************************************************************/
  25          void main (void)
  26          {
  27   1          u8 Ctr = 4;
  28   1          u8 Ctr1;
  29   1          
  30   1          Set_All_GPIO_Quasi_Mode;
  31   1      #if (_IP1717B_)
                  P13_Input_Mode;
                  P14_Input_Mode;
              #elif (_98DX316_)
  35   1          P03_PushPull_Mode;
  36   1          P05_PushPull_Mode;
  37   1          P13_PushPull_Mode;
  38   1          P14_Input_Mode;
  39   1      #endif
  40   1          Init_I2C();
  41   1          InitialUART0_Timer3(115200);
  42   1          
  43   1          //Timer2 init
  44   1          TIMER2_DIV_256;
  45   1          TIMER2_Auto_Reload_Delay_Mode;
  46   1          RCMP2L = TIMER_DIV256_VALUE_500ms;
  47   1          RCMP2H = TIMER_DIV256_VALUE_500ms>>8;
C51 COMPILER V9.56.0.0   MAIN                                                              11/12/2020 12:57:59 PAGE 2   

  48   1          TL2 = 0;
  49   1          TH2 = 0;
  50   1          set_ET2;                                    // Enable Timer2 interrupt
  51   1          set_EA;
  52   1          set_TR2;                                    // Timer2 run
  53   1          
  54   1      #if _FLASH_EEPROM_
  55   1          //read eeprom, get mode.
  56   1          WriteFlag = read_APROM_BYTE(0x4781);
  57   1          if (WriteFlag == 0xA8) {
  58   2              ModeCtr1 = read_APROM_BYTE(0x4782);
  59   2              ModeCtr2 = read_APROM_BYTE(0x4783);
  60   2              if (ModeCtr1 > _MODE_1_) {
  61   3                  ModeCtr1 = _MODE_0_;
  62   3              }
  63   2              if (ModeCtr2 > _MODE_1_) {
  64   3                  ModeCtr2 = _MODE_0_;
  65   3              }
  66   2              ModeLED();
  67   2          }
  68   1      #endif
  69   1          
  70   1          //TEST
  71   1          //TEST
  72   1          
  73   1      #if _TPS23861_
                  TPS23861_Init();
              #endif
  76   1          
  77   1          //Reset 98DX3136
  78   1          RST_98DX3136 = 0;
  79   1          Timer1_Delay10ms(50);
  80   1          RST_98DX3136 = 1;
  81   1          
  82   1          do
  83   1          {
  84   2              if (F_Timer) {
  85   3                  F_Timer = 0;
  86   3                  HoldKeyCtr++;
  87   3                  //Send_Data_To_UART0(0x7E);
  88   3                  //printf("\nTEST\n");
  89   3                  Ctr1++;
  90   3                  if (Ctr1 > 1) {
  91   4                      Ctr1 = 0x00;
  92   4                      #if _TPS23861_
                              PerformDetection = 1;
                              #endif
  95   4                  }
  96   3                  Ctr++;
  97   3                  if (Ctr > 4) {
  98   4                      Ctr = 0x00;
  99   4                      if (TPS23861_WorkMode == _MODE_AUTO_) {
 100   5                          #if _TPS23861_
                                  TPS23861_Run();
                                  #endif
 103   5                      }
 104   4                  }
 105   3              }
 106   2              
 107   2              ScanKey();
 108   2              if (F_PushKey) {
 109   3                  if ((Key < _MAX_KEY_) && (Key != _NO_KEY_)) {
C51 COMPILER V9.56.0.0   MAIN                                                              11/12/2020 12:57:59 PAGE 3   

 110   4                      PushKeyFunc();
 111   4                  }
 112   3              } else {
 113   3                  if ((OldKey < _MAX_KEY_) && (OldKey != _NO_KEY_)) {
 114   4                      ReleKeyFunc();
 115   4                  }
 116   3              }
 117   2          } while (1);
 118   1      }
 119            
 120          void ScanKey(void)
 121          {
 122   1          u8 i,j;
 123   1          u8 l;
 124   1        
 125   1          l = KEY_PORT_2;
 126   1          l = (l & _ALL_KEY_MASK_2_);
 127   1          i = KEY_PORT_1;
 128   1          i = (i & _ALL_KEY_MASK_1_);
 129   1          i = i|l;
 130   1        
 131   1          if (i == _ALL_KEY_MASK_) {
 132   2              F_PushKey = 0;
 133   2              F_NewKey  = 0;
 134   2              F_HoldKey = 0;
 135   2              F_TwoKey  = 0;
 136   2              goto normal_quit_scan_key;
 137   2          }
 138   1          
 139   1          Timer1_Delay10ms(1);
 140   1          
 141   1          l = KEY_PORT_2;
 142   1          l = (l & _ALL_KEY_MASK_2_);
 143   1          j = KEY_PORT_1;
 144   1          j = (j & _ALL_KEY_MASK_1_);
 145   1          j = j|l;
 146   1          
 147   1          if (j == _ALL_KEY_MASK_) {
 148   2              F_PushKey = 0;
 149   2              F_NewKey  = 0;
 150   2              F_HoldKey = 0;
 151   2              F_TwoKey  = 0;
 152   2              goto normal_quit_scan_key;
 153   2          }
 154   1          
 155   1          if (i == j) {
 156   2              if ((i & (~_ALL_KEY_MASK_1_)) == 0x00) {
 157   3                  //push key1
 158   3                  Key = _KEY_1_;
 159   3              }
 160   2              else if ((i & (~_ALL_KEY_MASK_2_)) == 0x00) {
 161   3                  //push key2
 162   3                  Key = _KEY_2_;
 163   3              }
 164   2              else {
 165   3                  //release key
 166   3                  Key = _NO_KEY_;
 167   3              }
 168   2          } else {
 169   2              //error
 170   2              Key = _NO_KEY_;
 171   2          }
C51 COMPILER V9.56.0.0   MAIN                                                              11/12/2020 12:57:59 PAGE 4   

 172   1          
 173   1          if (Key == _NO_KEY_) {
 174   2              //Key = _NO_KEY_;
 175   2              //F_PushKey = 0;
 176   2              F_NewKey  = 0;
 177   2              F_HoldKey = 0;
 178   2              F_TwoKey  = 0;
 179   2              goto normal_quit_scan_key;
 180   2          } else {
 181   2              if (F_PushKey == 0) {
 182   3                  OldKey = Key;
 183   3                  F_NewKey = 1;
 184   3                  F_PushKey = 1;
 185   3                  //TEST
 186   3                  //P10 = 1;
 187   3              }
 188   2          }
 189   1          
 190   1      normal_quit_scan_key:
 191   1          nop;
 192   1      }
 193          
 194          /********************************************************************//**
 195           * @brief:      KEY HOLD COM Function subprogram
 196           *              
 197           *
 198           * @param[in]:  NONE
 199           *              
 200           * @return:     NONE
 201           *********************************************************************/
 202          BOOLEAN HoldKeyCom(void)
 203          {
 204   1        if (F_NewKey == 1) {
 205   2          HoldKeyCtr = 0;
 206   2        } else {
 207   2          if (F_HoldKey == 0) {
 208   3            if (HoldKeyCtr == _HOLD_TIMER_KEY_) {
 209   4              F_HoldKey = 1;
 210   4              return 1;
 211   4            }
 212   3          }
 213   2        }
 214   1        
 215   1        return 0;
 216   1      }
 217          
 218          
 219          /********************************************************************//**
 220           * @brief:      KEY SETTING COM Function subprogram
 221           *              
 222           *
 223           * @param[in]:  NONE
 224           *              
 225           * @return:     NONE
 226           *********************************************************************/
 227          //BOOLEAN SettingCom(void)
 228          //{
 229          //  if (F_NewKey == 1) {
 230          //    HoldKeyCtr = 0;
 231          //    //KEY_TONE();
 232          //    return 1;
 233          //  } else {
C51 COMPILER V9.56.0.0   MAIN                                                              11/12/2020 12:57:59 PAGE 5   

 234          //    if (F_HoldKey == 0) {
 235          //      if (HoldKeyCtr == _HOLD_TIMER_KEY_) {
 236          //        F_HoldKey = 1;
 237          //        //Timer2_init(_T2_125MS_INT_);
 238          //        return 1;
 239          //      }
 240          //    } else {
 241          //      return 1;
 242          //    }
 243          //  }
 244          //  
 245          //  return 0;
 246          //}
 247          
 248          void ModeLED(void)
 249          {
 250   1          if ((ModeCtr1 == _MODE_0_) && (ModeCtr2 == _MODE_0_)) {
 251   2              ModeCtr = _MODE_0_;
 252   2              LED1 = _LED_OFF_;
 253   2              LED2 = _LED_OFF_;
 254   2          }
 255   1          else if ((ModeCtr1 == _MODE_0_) && (ModeCtr2 == _MODE_1_)) {
 256   2              ModeCtr = _MODE_1_;
 257   2              LED1 = _LED_OFF_;
 258   2              LED2 = _LED_ON_;
 259   2          }
 260   1          else if ((ModeCtr1 == _MODE_1_) && (ModeCtr2 == _MODE_0_)) {
 261   2              ModeCtr = _MODE_2_;
 262   2              LED1 = _LED_ON_;
 263   2              LED2 = _LED_OFF_;
 264   2          }
 265   1          else if ((ModeCtr1 == _MODE_1_) && (ModeCtr2 == _MODE_1_)) {
 266   2              ModeCtr = _MODE_3_;
 267   2              LED1 = _LED_ON_;
 268   2              LED2 = _LED_ON_;
 269   2          }
 270   1          
 271   1      #if _FLASH_EEPROM_
 272   1          write_DATAFLASH_BYTE (0x4781,0xA8);
 273   1          write_DATAFLASH_BYTE (0x4782,ModeCtr1);
 274   1          write_DATAFLASH_BYTE (0x4783,ModeCtr2);
 275   1      #endif
 276   1      }
 277          
 278          /********************************************************************//**
 279           * @brief:      push key Function subprogram
 280           *              
 281           *
 282           * @param[in]:  NONE
 283           *              
 284           * @return:     NONE
 285           *********************************************************************/
 286          void PushKeyFunc(void)
 287          {
 288   1          switch (Key)
 289   1          {
 290   2              case _KEY_1_:
 291   2                if (HoldKeyCom()) {
 292   3                    OldKey = 0x00;
 293   3                    #if _TPS23861_
                            TPS23861_WorkMode = ~TPS23861_WorkMode;
                            TPS23861_ModeChange(TPS23861_WorkMode);
C51 COMPILER V9.56.0.0   MAIN                                                              11/12/2020 12:57:59 PAGE 6   

                            
                            LED1 = _LED_ON_;
                            DelayMs(200);
                            LED1 = _LED_OFF_;
                            DelayMs(200);
                            LED1 = _LED_ON_;
                            DelayMs(200);
                            LED1 = _LED_OFF_;
                            DelayMs(200);
                            ModeLED();
                            #endif
 307   3                }
 308   2                break;
 309   2              case _KEY_2_:
 310   2                if (HoldKeyCom()) {
 311   3                    //
 312   3                    OldKey = 0x00;
 313   3                }
 314   2                break;
 315   2              default:
 316   2                break;
 317   2          }
 318   1          
 319   1          F_NewKey = 0;
 320   1      }
 321          
 322          /********************************************************************//**
 323           * @brief:      rele key Function subprogram
 324           *              
 325           * @param[in]:  NONE
 326           *              
 327           * @return:     NONE
 328           *********************************************************************/
 329          void ReleKeyFunc(void)
 330          {
 331   1          INT8U tmp;
 332   1        
 333   1          tmp = OldKey;
 334   1          OldKey = 0x00;
 335   1          
 336   1          switch (tmp)
 337   1          {
 338   2              case _KEY_1_:
 339   2                //if (SettingCom()) {
 340   2                //    if (F_NewKey) {
 341   2                        RST_98DX3136 = 0;
 342   2                        Timer1_Delay10ms(50);
 343   2                        RST_98DX3136 = 1;
 344   2                      
 345   2                        ModeCtr1++;
 346   2                        if (ModeCtr1 > _MODE_1_) {
 347   3                            ModeCtr1 = _MODE_0_;
 348   3                        }
 349   2                        ModeLED();
 350   2                //    }
 351   2                //}
 352   2                break;
 353   2              case _KEY_2_:
 354   2                //if (SettingCom()) {
 355   2                //    if (F_NewKey) {
 356   2      #if (_IP1717B_)
                            RST_98DX3136 = 0;
C51 COMPILER V9.56.0.0   MAIN                                                              11/12/2020 12:57:59 PAGE 7   

                            Timer1_Delay10ms(1);
                            RST_98DX3136 = 1;
                            
                            ModeCtr2++;
                            if (ModeCtr2 > _MODE_1_) {
                                ModeCtr2 = _MODE_0_;
                            }
                            ModeLED();
              #elif (_98DX316_)
 367   2                    
 368   2      #endif
 369   2                //    }
 370   2                //}
 371   2                break;
 372   2              default:
 373   2                break;
 374   2          }
 375   1          
 376   1          
 377   1      }
 378          
 379          /********************************************************************//**
 380           * @brief:      Timer 2 Init Function subprogram
 381           *              
 382           * @param[in]:  NONE
 383           *              
 384           * @return:     NONE
 385           *********************************************************************/
 386          void Timer2_ISR (void) interrupt 5
 387          {
 388   1          clr_TF2;                                //Clear Timer2 Interrupt Flag
 389   1          P12 = ~P12;                             // GPIO1 toggle
 390   1          F_Timer = 1;
 391   1      }
 392          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    522    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     32       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      6    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
